# ${license-info}
# ${developer-info}
# ${author-info}
# ${build-info}

=head1 NAME

ncm-${project.artifactId}: Configure services whose config format is
very widespread, such as YAML or JSON.

=head1 DESCRIPTION

${project.artifactId}

=head1 RESOURCES

=head2 /software/components/${project.artifactId}

The configuration information for the component.  It is an nlist of
C<services>, indexed by absolute path. Each service contains:

=over 4

=item * C<mode> : long

File permissions. Defaults to 0644.

=item * C<owner> : string

File owner. Defaults to root.

=item * C<group> : string

File group. Defaults to root.

=item * backup ? string

Extension for the file's backup.

=item * module : string

Module to render the configuration file. See L<CONFIGURATION MODULES>
below.

=item * daemon ? string

Daemon to restart if the file changes.

Even if multiple C<services> are associated to the same daemon, the
daemon will be restarted at most once.

=item * contents

A free-form structure describing the valid entries for the
configuration file. It is recommended to define another type for each
config file, and bind it to these contents, to get the best
validation.

=back

=head1 CONFIGURATION MODULES

The following formats my be rendered:

=over 4

=item * general

Uses Perl's L<Config::General>. This leads to configuration files
similar to this one:

    <nlist>
      <another nlist>
        scalar value
        another scalar value>
      </another nlist>
    </nlist>
    list_element 0
    list_element 1
    list_element 2

=item * tiny

Uses Perl's L<Config::Tiny>, typically for C<key = value> files.

=item * yaml

Uses Perl's L<YAML::XS> for rendering YAML configuration files.

=item * json

Uses L<JSON::XS> for rendering JSON configuration files.

=back

=head1 EXAMPLES

=head2 Configuring /etc/ccm.conf

The well-known /etc/ccm.conf can be defined like this:

=head3 Define a valid structure for the file

    type ccm_conf_file = {
        "profile" : type_absoluteURI
        "debug" : long(0..5)
        "force" : boolean = false
        ...
    };

    bind "/software/components/metaconfig/{/etc/ccm.conf}/contents" = ccm_conf_file;

=head3 Fill in the contents

    prefix "/software/components/metaconfig/{/etc/ccm.conf}"

    "contents/profile" = "http://www.google.com";
    "module" = "general";

=head3 And that's it

Now, just compile and deploy. You should get the same results as with
old good ncm-ccm.



=head1 AUTHOR

${author-info}

=head1 TODO

Anyone knows of a good Apache config renderer for Perl??

=cut
