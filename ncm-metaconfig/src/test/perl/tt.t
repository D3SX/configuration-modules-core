#!/usr/bin/perl
# -*- mode: cperl -*-
use strict;
use warnings;
use Test::More;
use Test::Quattor;
use NCM::Component::metaconfig;
use CAF::Object;

eval {use Template};

use Readonly;

Readonly my $STR => "An arbitrary string";

plan skip_all => "Template::Toolkit not found" if $@;

$CAF::Object::NoAction = 1;

our $sane_templates = "foo/bar";

# For these tests, we don't really need any Template::Toolkit. Just be
# sure that it gets called with the expected arguments.
no warnings 'redefine';
*NCM::Component::template = sub {
    my ($self) = @_;
    return $self;
};

sub NCM::Component::process {
    my ($self, $file, $cfg, $str) = @_;
    $self->{$file}->{CFG} = $cfg;

    $$str = $STR;
    return !$self->{$file}->{failed};
}

*NCM::Component::metaconfig::sanitize_template = sub {
    my ($self, $tpl) = @_;
    $self->{TEMPLATES}->{$tpl} = 1;
    return $sane_templates;
};

use warnings 'redefine';

=pod

=head1 DESCRIPTION

Test that a config file can be generated by this component, using
Template::Toolkit to render an arbitrary file format.

=head1 TESTS

=cut


my $cmp = NCM::Component::metaconfig->new('metaconfig');

my $cfg = {
	   owner => 'root',
	   group => 'root',
	   mode => 0644,
	   contents => {
			foo => 1,
			bar => 2,
			baz => {
				a => [0..3]
				}
			},
	   daemon => 'httpd',
	   module => "foo/bar",
	  };

my $restart = 1;

=pod

=head2 Basic method execution

All methods are called with the expected arguments.

=cut

is($cmp->tt($cfg->{contents}, $cfg->{module}), $STR,
   "Method returns the expected string");

is($cmp->{TEMPLATES}->{$cfg->{module}}, 1, "The template was sanitized");
my $tpl_call = $cmp->{$sane_templates};
ok($tpl_call, "Template name was sanitized");
is($tpl_call->{CFG}, $cfg->{contents},
   "Template processed with the correct configuration");
ok(!exists($cmp->{ERROR}), "No errors in this run");

=pod

=head2 Errors while rendering the template are reported

Also, the error string generated by C<Template::Toolkit> must be
displayed

=cut

$tpl_call->{failed} = 1;
$cmp->tt($cfg->{contents}, "/foo/bar/baz.conf");
is($cmp->{ERROR}, 2, "Errors reported when the template processing fails");

=pod

=head2 Errors when sanitizing the template are reported

=cut

$sane_templates = undef;
$cfg->{module} = "invalid";
ok(!$cmp->tt($cfg->{contents}, $cfg->{module}), "Invalid template name is detected");
is($cmp->{TEMPLATES}->{$cfg->{module}}, 1, "Tried to sanitize invalid template");
is($cmp->{ERROR}, 3, "Error on invalid template name was reported");

done_testing();
