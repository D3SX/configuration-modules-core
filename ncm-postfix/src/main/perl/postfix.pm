# ${license-info}
# ${developer-info}
# ${author-info}
# ${build-info}

package NCM::Component::postfix;

use strict;
use warnings;

use base qw(NCM::Component);

use LC::Exception;
use LC::Find;
use LC::File qw(copy makedir);

use EDG::WP4::CCM::Element;
use CAF::FileWriter;
use CAF::FileEditor;
use CAF::Process;
use File::Basename;
use File::Path;
use Template;
use Readonly;

Readonly::Array my @RESTART => qw(/sbin/service postfix restart);
Readonly::Hash my %FILES => {
			     main => { file => "/etc/postfix/main.cf",
				       template => "postfix/main.tt" },
			     master => { file => "/etc/postfix/master.cf",
					 template => "postfix/master.tt" },
			     dbs => {
				     ldap => {
					      template => "postfix/ldap.tt" }
				    }
			    };


our $EC=LC::Exception::Context->new->will_store_all;



# Restart the process.
sub restart_postfix {
    my ($self) = @_;
    CAF::Process->new(\@RESTART, log => $self)->run();
    return;
}

# Fills a configuration file from the profile subtree $tree. The file
# and templates
sub handle_config_file
{
    my ($self, $tree, $files) = @_;
    my $fh = CAF::FileWriter->new($files->{file}, log => $self);
    printf $fh "File generated by %s. Do not edit\n", __PACKAGE__;
    if (!$self->template()->process($files->{template}, $tree, $fh)) {
	$self->error("Unable to process template for $files->{file}: ",
		     $self->template()->error());
	$fh->cancel();
    }
}

sub handle_databases
{
    my ($self, $tree);

    while (my ($dbtype, $dbs) = each(%$tree)) {
	$self->verbose("Generating configuration for database type $dbtype");
	my $tpl = $FILES{dbs}->{$dbtype}->{template};
	while (my ($db, $dbcfg) = each(%$dbs)) {
	    my $fh = CAF::FileWriter->new($db, log => $self);
	    print $fh "File generated by %s. Do not edit\n", __PACKAGE__;
	    if (!$self->template()->process($tpl, $dbcfg, $fh)) {
		$self->error("Unable to process template for database $db",
			     $self->template()->error());
		$fh->cancel();
	    }
	}
    }
}

sub Configure {
    my ($self, $config, $base) = @_;

    my $t = $config->getElement($base)->getTree();
    $self->handle_config_file($t->{master}, $FILES{master});
    $self->handle_config_file($t->{main}, $FILES{main});
    $self->handle_databases($t->{databases}) if exists($t->{databases});
    $self->restart_postfix();
    return 1;
}

1; # Required for perl module!
